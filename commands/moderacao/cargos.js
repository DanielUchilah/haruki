const Discord = require('discord.js')

module.exports = {
    nome: "cargos",
    alternativas: ["cargos", "addrole", "removerole", "createrole", "deleterole"],
    run: async(client, message, args) => {

        if(!message.guild.me.hasPermission("SEND_MESSAGES")) return message.author.send("Ent√£o... Eu n√£o possuo permiss√£o de enviar mensagens no servidor, pe√ßa para um administrador gerenciar meu cargo.").catch(err => { return });
        if(!message.guild.me.hasPermission("MANAGE_ROLES")) return message.reply("Ent√£o... Eu n√£o possuo permiss√£o de gerenciar mensagens no servidor, pe√ßa para um administrador gerenciar meu cargo.")
        if(!message.guild.me.hasPermission("USE_EXTERNAL_EMOJIS")) return message.reply("Ent√£o... Eu n√£o possuo permiss√£o de enviar emojis externos no servidor, pe√ßa para um administrador gerenciar meu cargo.")
        
        if(!message.member.hasPermission("MANAGE_ROLES")) return message.reply("Voc√™ n√£o tem permiss√£o para utilizar este comando bobo(a). A permiss√£o necess√°ria √© **Gerenciar cargos.**")

        var embed = {
            title: "<a:engrenagem:745757337574178867> ‚ãÖ Cargos.",
            fields: [
                {
                    name: ":paperclip: Adicionar cargo.",
                    value: "Utilize **h/cargos adicionar (Membro) (Cargo)** para poder adicionar certo cargo em um usu√°rio. ",
                    inline: false,
                },
                {
                    name: ":balloon: Remover cargo.",
                    value: "Utilize **h/cargos remover (Membro) (Cargo)** para poder remover certo cargo de um usu√°rio.",
                    inline: false,
                },
                {
                    name: "üìã Deletar cargo.",
                    value: "Utilize **h/cargos deletar (Cargo)** para poder apagar um cargo.",
                    inline: false
                },
                {
                    name: "‚è∞ Criar cargo.",
                    value: "Utilize **h/cargos criar (Cor) (Nome)** para poder criar um cargo.",
                    inline: false
                }
            ],
            color: "AQUA"
        }
        if(!args[0]) return message.reply({ embed: embed })

        

        switch(args[0].toLowerCase()) {

            case "adicionar":

                var membro = message.guild.member(message.mentions.users.first() || message.guild.members.cache.get(args[1]))
                if(!membro) return message.reply("Eu n√£o consegui encontrar o membro que voc√™ inseriu...")

                var cargo = message.mentions.roles.first() || message.guild.roles.cache.get(args[2])
                if(!cargo) return message.reply("Eu n√£o consegui encontrar o cargo que voc√™ inseriu...")

                if(membro.roles.cache.has(cargo.id)) return message.reply(`O usu√°rio j√° possue esse cargo, use **h/cargos ${membro} ${cargo}** para remover o cargo do usu√°rio.`)
                if(membro.id === message.author.id) return message.reply("Sinto muito mas por quest√µes de seguran√ßa, n√£o irei deixar voc√™ adicionar o cargo em si mesmo.")

                if(message.guild.members.cache.get(client.user.id).roles.highest.rawPosition < cargo.rawPosition) return message.reply("Sinto muito mas... O cargo que voc√™ inseriu √© maior que o meu, serei incapaz de adicionar.")
                if(!membro.roles.highest.rawPosition > cargo.rawPosition) return message.reply("Sinto muito mas por quest√µes de seguran√ßa, n√£o irei deixar voc√™ adicionar o cargo neste usu√°rio.")

                membro.roles.add(cargo).then(() => {
                    
                    message.reply("Prontin, cargo adicionado.")

                }).catch(err => {

                    message.reply("Ocorreu um erro interno, sinto muito. Caso o problema persistir, chame o suporte.")

                })

            break;
            case "remover":

                var membro = message.guild.member(message.mentions.users.first() || message.guild.members.cache.get(args[1]))
                if(!membro) return message.reply("Eu n√£o consegui encontrar o membro que voc√™ inseriu...")

                var cargo = message.mentions.roles.first() || message.guild.roles.cache.get(args[2])
                if(!cargo) return message.reply("Eu n√£o consegui encontrar o cargo que voc√™ inseriu...")

                if(!membro.roles.cache.has(cargo.id)) return message.reply(`O usu√°rio n√£o possue esse cargo, use **h/cargos adicionar ${membro} ${cargo}** para adicionar o cargo no usu√°rio.`)
                if(membro.id === message.author.id) return message.reply("Sinto muito mas por quest√µes de seguran√ßa, n√£o irei deixar voc√™ remover o cargo de si mesmo.")

                if(membro.roles.highest.rawPosition > message.member.roles.highest.rawPosition) return message.reply("Voc√™ possue um cargo inferior que o usu√°rio mencionado, serei incapaz de remover.")
                if(message.guild.members.cache.get(client.user.id).roles.highest.rawPosition < cargo.rawPosition) return message.reply("Sinto muito mas... O cargo que voc√™ inseriu √© maior que o meu, serei incapaz de remover.")
                if(!membro.roles.highest.rawPosition > cargo.rawPosition) return message.reply("Sinto muito mas por quest√µes de seguran√ßa, n√£o irei deixar voc√™ remover o cargo desse usu√°rio.")

                membro.roles.remove(cargo).then(() => {
                    
                    message.reply("Prontin, cargo removido.")

                }).catch(err => {

                    message.reply("Ocorreu um erro interno, sinto muito. Caso o problema persistir, chame o suporte.")

                })

            break;
            case "criar":

                if(!args[1]) return message.reply("Voc√™ n√£o inseriu a cor que deseja. (√â necess√°rio que a cor esteja em formato HEX)")
                if(!args.slice(2).join(" ")) return message.reply("Voc√™ n√£o inseriu o nome que deseja.")

                message.guild.roles.create({data: { name: args.slice(2).join(" "), color: args[1] }}).then(() => {
                    message.reply("Prontin, cargo criado.")
                }).catch(err => {

                    message.reply("Ocorreu um erro interno, sinto muito. Caso o problema persistir, chame o suporte.")

                })

            break;
            case "deletar":

                var cargo = message.guild.roles.cache.get(args[1]) || message.mentions.roles.first()
                if(!cargo) return message.reply("Voc√™ n√£o inseriu o cargo que deseja deletar.")

                if(message.member.roles.highest.rawPosition < cargo.rawPosition) return message.reply("O seu cargo √© inferior ao mencionado, serei incapaz de deletar.")

                message.guild.roles.cache.get(cargo.id).delete().then(() => {

                    message.reply("Prontin, cargo deletado.")
                    
                }).catch(err => {

                    message.reply("Ocorreu um erro interno, sinto muito. Caso o problema pesistir, chame o suporte.")

                })


            break;
            default: 

            var embed = {
                title: "<a:engrenagem:745757337574178867> ‚ãÖ Cargos.",
                fields: [
                    {
                        name: ":paperclip: Adicionar cargo.",
                        value: "Utilize **h/cargos adicionar (Membro) (Cargo)** para poder adicionar certo cargo em um usu√°rio. ",
                        inline: false,
                    },
                    {
                        name: ":balloon: Remover cargo.",
                        value: "Utilize **h/cargos remover (Membro) (Cargo)** para poder remover certo cargo de um usu√°rio.",
                        inline: false,
                    },
                    {
                        name: "üìã Deletar cargo.",
                        value: "Utilize **h/cargos deletar (Cargo)** para poder apagar um cargo.",
                        inline: false
                    },
                    {
                        name: "‚è∞ Criar cargo.",
                        value: "Utilize **h/cargos criar (Cor) (Nome)** para poder criar um cargo.",
                        inline: false
                    }
                ],
                color: "AQUA"
            }
            message.reply({ embed: embed })

            break;

        }


    }
}